{"componentChunkName":"component---src-templates-blog-list-tsx","path":"/category/data-management/","result":{"data":{"remark":{"posts":[{"post":{"html":"<p>Your data is in Excel and you need to import it into SAS.  You googled, and discovered 5000 different methods.  Which to choose?  We compare and contrast 5 approaches to this perennial problem.  Before we get onto that though - <strong>why</strong> is it such a problem?</p>\n<p>The crux of the issue is: <h2>Flexibility vs Scalability</h2></p>\n<p>Excel, as you probably know, is incredibly flexible. Data can spread in all directions, move around, be positioned anywhere, on any cell, of any worksheet in a workbook. That workbook can have different names, exist in different locations, be of different types (xls, xlsx, xlsm). That's before we get down to whether the data arrives as values, formatted values, formulas, or <a href=\"https://www.linkedin.com/posts/allanbowe_data-engineers-in-your-experience-what-activity-6771408875544461312-Weqt\">other dragons</a>. And the fact that, as it is typically stored on a shared filesystem, it can be changed by anyone, at any time.</p>\n<p>SAS is far less flexible in this regard. Data is nearly always structured in a table, with fixed columns, of fixed data types, in a fixed library / location, with a fixed name (or naming convention). That table usually lives on a server, perhaps in a database. This rigidity is actually a Very. Good. Thing. It provides consistency, which is the basis for scalability. And the basis of the consistency is how the data is modelled.</p>\n<h2>The Data Model</h2>\n<p>Every table in SAS contains some kind of metadata about how the data is structured - the column names, types (character vs numeric), formats (dates, currency), lengths, encoding (UTF8 vs WLATIN1) and more. The first question you need to ask yourself, when loading Excel data into SAS, is - do I take the model from Excel? Or am I targeting an existing model in SAS?</p>\n<p>Speaking of SAS. The word \"SAS\" can mean so many things - do we mean the language? The platform? The company? A specific product? Let's break this down, as the choice of tool will depend on the type of \"SAS\" you have.</p>\n<h2>Which Flavour of SAS do I have?</h2>\n<p>The world of SAS can be broken into 3 major platforms:</p>\n<ul>\n<li>Base SAS. Traditional SAS, typically installed on your desktop.</li>\n<li>SAS Meta. An enterprise deployment with mid-tier and metadata server.</li>\n<li>SAS Viya. Cloud native, API driven microservices architecture.</li>\n</ul>\n<p>The options available to you for importing Excel will vary depending on the flavour you are using. How do you know which one you have? Try running the following code in SAS:</p>\n<pre><code class=\"language-sas\">filename mc url \"https://raw.githubusercontent.com/sasjs/core/main/all.sas\";\n%inc mc;\n%put %mf_getplatform();\n</code></pre>\n<p>The entry in the log will tell you if your environment is BASESAS, SASMETA or SASVIYA.</p>\n<h2>Importing Excel into SAS</h2>\n<p>Without further ado, let's explore the options available!</p>\n<h3>1 - Import Excel with Data Controller for SAS</h3>\n<p>It's <em>super easy</em> to import an arbitrary Excel file to an <strong>existing</strong> table using Data Controller for SAS. You simply choose the table you'd like to modify, then drag your Excel file into the browser.</p>\n<p>Data Controller will scan every worksheet in your Excel file to find a range that matches the target table. How does it do that? The top of the range is identified by simply checking for a <em>row</em> that contains<em> all columns</em> as per the target table definition, whereas the bottom of the range is simply the first blank primary key value.</p>\n<p>Once the range is found, Data Controller will perform a series of automatic checks and validations, and import the data and a copy of the workbook. If all the checks pass, it's one button click to load the data (and corresponding workbook) to the SAS server and notify the approver that a change request has been submitted.</p>\n<p><div class=\"gatsby-resp-iframe-wrapper\" style=\"padding-bottom: 56.53333333333334%; position: relative; height: 0; overflow: hidden; margin-bottom: 1.0725rem\" > <div class=\"embedVideo-container\"> <iframe title=\"\" src=\"https://player.vimeo.com/video/417808409\" class=\"embedVideo-iframe\" style=\"border:0; position: absolute; top: 0; left: 0; width: 100%; height: 100%; \" loading=\"eager\" allowfullscreen=\"\" sandbox=\"allow-same-origin allow-scripts allow-popups\"></iframe> </div> </div></p>\n<p>Once the approver approves the change, the table is updated. There is a full audit history and you can even retrieve the original excel file that was submitted. The tool does NOT let you load <em>new</em> tables to SAS, nor does it let you modify the columns. The <em>model</em> is therefore protected by IT, whilst the <em>values</em> are managed by the business.</p>\n<p>Data Controller is available for all 3 SAS platforms (SAS Meta, SAS Viya, Base SAS). Like what you see? Don't hesitate to <a href=\"https://datacontroller.io\">book a demo session</a> and meet the team!</p>\n<h3>2 - Import Excel using SAS Studio</h3>\n<img class=\"alignright\" src=\"/wp-content/uploads/2021/04/2IrsV7v.png\" alt=\"Upload File to SAS Studio\" width=\"352\" height=\"442\" />\n<p>This approach can be used whether you are using SAS Meta, SAS Viya, or even Base SAS (eg with University Edition). Just open [YOURSERVER]/SASStudio in a browser (on Viya, it will be /SASStudio<strong>V</strong>).</p>\n<p>The first step will be to get the Excel file to a location where it can be accessed by SAS.</p>\n<p>On Viya, that will require opening the Explorer menu, expanding the server dropdown, and right clicking on the directory within. You can then choose the \"Upload files\" option to import your spreadsheet. Your upload is limited to 100mb (default system setting), and the target directory is typically the unix home directory for your user.</p>\n<p>The \"home directory\" part is a key point - as it means that other users will not necessarily be able to access that source file. To easily load to other areas on the SAS filesystem you may need to ask your admin to create a symlink, or use an alternative upload mechanism (such as <a href=\"https://sasjs.io/apps/#viya-file-uploader\">this one</a>).</p>\n<img class=\"alignleft\" src=\"/wp-content/uploads/2021/04/2021-04-10_15-53.png\" alt=\"Import Excel to SAS Studio\" width=\"218\" height=\"203\" />\n<p>Once your file is available on the server, you can begin the import process. Simply click on the Start Page, \"New Import\" and follow the steps in the wizard.</p>\n<p>The generated SAS code will be shown in the window below, and the output can be directed to either to WORK or a permanent library as desired.</p>\n<p>You may need to rename the default target dataset (eg from IMPORT to IMPORT2) in order to run the code.</p>\n<h3>3 - How to Import Excel using the SAS Add-In for Microsoft Office</h3>\n<p>Unlike the other examples presented, this one allows you to load data from directly within your Excel workbook! You must have the requisite permission to make data write-back to the target table selected. You can also modify column properties and specify an 'inactivity timeout' before 'edit mode' is closed.\nTo use, simply open your desired table and click the \"Begin Edit\" button in the SAS Ribbon.</p>\n<p><div class=\"gatsby-resp-iframe-wrapper\" style=\"padding-bottom: 56.53333333333334%; position: relative; height: 0; overflow: hidden; margin-bottom: 1.0725rem\" > <div class=\"embedVideo-container\"> <iframe title=\"\" src=\"https://www.youtube.com/embed/XrK3hmYO4ag?rel=0\" class=\"embedVideo-iframe\" style=\"border:0; position: absolute; top: 0; left: 0; width: 100%; height: 100%; \" loading=\"eager\" allowfullscreen=\"\" sandbox=\"allow-same-origin allow-scripts allow-popups\"></iframe> </div> </div></p>\n<p>The SAS Add-In for Microsoft Office is available only for SAS Meta deployments.</p>\n<h3>4 - Import Excel using the SAS Enterprise Guide Wizard</h3>\n<img class=\"alignright\" src=\"/wp-content/uploads/2021/04/import_excel_into_EG_03.jpg\" alt=\"SAS Enterprise Guide\" width=\"500\" height=\"284\" />\n<p>To import a spreadsheet using Enterprise Guide you can simply click \"File\" then \"Import Data\" and select your Excel file to proceed through the wizard. An excellent guide to this process is available <a href=\"https://bi-notes.com/sas-enterprise-guide-import-excel/\">here</a>. This process will load an Excel table into your SAS project, where you can run further analyses.\nThis approach will work for both SAS Meta and Base SAS deployments, the key difference being that for SAS Meta your tables will be on the SAS Server as opposed to the local desktop.</p>\n<h3>5 - Import Excel using the SAS Data Integration Studio</h3>\n<p>This option is more for SAS 9 ETL developers building enterprise data flows from stable data sources. Many ETL teams are forced to build flows Excel, despite it's (deserved) reputation as an \"unstable data source\".\nOne way to perform this task is to set up a library using the EXCEL engine, then register the tables within it. This involves a number of steps, the screenshots for which are below!\n<img class=\"aligncenter\" src=\"/wp-content/uploads/2021/04/Excel-in-DI-Studio.png\" alt=\"Import Excel to SAS DI Studio\" width=\"683\" height=\"984\" /></p>\n<h2>Comparison of Methods</h2>\n<p>With so many methods, how do you choose the one that is right for you? This depends on the volume, velocity, variety, and <em>purpose</em> of the data you are loading. If your Excel is large, has a static structure, and arrives directly from a source system on a regular basis in a fixed location, then you would probably want to build an automated flow using Data Integration Studio. For ad-hoc data, prepared by technical analysts for departmental reporting then either Enterprise Guide, SAS Studio or the SAS Addin are potential choices.</p>\n<p>For <em>business</em>-<em>sourced</em> data (such as model parameter sets, reference data, actuarial assumptions) that need to be updated in an <em>IT-secured</em> environment then Data Controller is an<strong> ideal choice.</strong> Particularly given that it eliminates the need for a shared directory and reduces the risk of downstream batch incidents due to 'validate on load' features.</p>\n<p>Data Controller works well as a zero-code option for Excel imports, in the following scenarios:</p>\n<ul>\n<li>The extraction process must be dynamic, as data can sometimes have additional columns or differently named worksheets</li>\n<li>You need to upload data rapidly and don't have time for a fully automated ETL solution to be built &#x26; deployed</li>\n<li>You must retain the original Excel, along with change metadata, for audit purposes</li>\n<li>Your SAS Admin does not have capacity for ad-hoc data modification requests</li>\n<li>You would like to separate the role of Data Submitter and Data Approver</li>\n<li>Your data model needs protecting from accidental corruption</li>\n<li>You need automatic Data Quality rules applied at source</li>\n</ul>\n<p>Below is a further comparison of the different options:</p>\n <img class=\"aligncenter size-full\" src=\"/wp-content/uploads/2021/04/dcgrid-1.png\" alt=\"Data Controller compared\" width=\"558\" height=\"436\" />\n<p>If you'd like to discuss potential use cases for Data Controller, or to get a deep dive into any of it's features, you can begin the process right now by requesting a <a href=\"https://datacontroller.io/contact\">demo session</a>!</p>","fields":{"slug":"/5-zero-code-ways-to-import-excel-into-sas/"},"frontmatter":{"title":"Five Zero-Code ways to Import Excel into SAS","date":"April 18, 2021","author":"Allan Bowe","authorLink":"https://www.linkedin.com/in/allanbowe/","previewImg":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/static/043577231d674d7161ae729c465039a2/5e981/dcgrid.png","srcSet":"/static/043577231d674d7161ae729c465039a2/0ac2e/dcgrid.png 143w,\n/static/043577231d674d7161ae729c465039a2/90c96/dcgrid.png 285w,\n/static/043577231d674d7161ae729c465039a2/5e981/dcgrid.png 570w","sizes":"(min-width: 570px) 570px, 100vw"},"sources":[{"srcSet":"/static/043577231d674d7161ae729c465039a2/8990e/dcgrid.webp 143w,\n/static/043577231d674d7161ae729c465039a2/3a47a/dcgrid.webp 285w,\n/static/043577231d674d7161ae729c465039a2/20ad4/dcgrid.webp 570w","type":"image/webp","sizes":"(min-width: 570px) 570px, 100vw"}]},"width":570,"height":472.99999999999994}}}}}},{"post":{"html":"<p>End User Computing (EUC) applications are unavoidable - the challenge is not to erase them, but to embrace automated approaches to EUC management that will identify, clean, secure, backup, and integrate EUC data with full auditability, ownership, and approval.</p>\n<h2>The Much-Maligned EUC</h2>\nEUC applications such as Excel, Access Databases, and locally executed programs, are often targeted as the source of a myriad of risks - such as financial misstatements, internal fraud, incorrect models, and potential for business process disruption. The rationale being that business developed / owned applications are not subject to the same access controls, development &amp; testing standards, documentation and release management processes as can be found over the \"IT Fence\". Whilst this is probably true, the inherent flexibility of EUCs that can be quickly updated without service desk requests, project codes, or lost arms &amp; legs - means that EUCs are, regardless, here to stay.\n<p>The challenge is to find a way to shine a light onto this \"Shadow IT\", and provide a framework by which EUC data can be extracted in a simple, safe, secure, scalable, and auditable fashion. <a href=\"/wp-content/uploads/2018/10/DC-UML-Use-Case-Diagram-EUC.png\"><img class=\"aligncenter size-large wp-image-1008\" src=\"/wp-content/uploads/2018/10/DC-UML-Use-Case-Diagram-EUC.png\" alt=\"EUC Use Case Diagram\" /></a></p>\n<h2>EUCs can be Controlled</h2>\nThe 'war on EUCs' cannot be won - it simply isn't practical to ban them, or to migrate / redevelop every closely held and highly complex legacy VBA application. Until alternative solutions for Citizen Developers to build Enterprise Apps (such as <a href=\"https://sasjs.io\">SASjs</a>) become mainstream, simple measures / controls on the EUCs themselves must be implemented - such as version control, readonly attributes, embedded documentation, peer review etc. In the meantime, a management system for EUCs is the ideal place for capturing the requisite metadata needed to monitor, audit, and secure the data therein. Such a management system should have, as a minimum, the following attributes:\n<h3>EUC Data Quality at Source</h3>\nThe ability to run data quality routines at the point of data upload (from EUC to secure IT environment) provides instant feedback to EUC operators that will allow them to make corrections and avoid costly post-upload investigations, re-runs, or worse - incorrect results. As part of this process, it should be easy to create and update those Data Quality rules. A longer discussion of Data Quality can be found <a href=\"https://www.linkedin.com/pulse/zen-art-data-quality-allan-bowe/\">here</a>.\n<h3>EUC Data Review (4 eyes)</h3>\nAfter EUC data is submitted, it should be reviewed before the target database is updated. It should be possible (but not mandatory) for this check to be performed by a different individual. When performing that check, it should only be necessary to review new / changed / deleted records. For changed records, the reviewer should also be able to see the original values. If the data is approved, the target table is updated. If rejected, the staged data can simply be archived.\n<h3>Roles &amp; Responsibilities (RACI)</h3>\nBy capturing who is actually submitting the data, we can see who is responsible for each EUC. By reviewing who is signing off on that data, we have an indication of who is accountable. And by seeing who is being notified of changes to that data, we can deduce who are being consulted / informed. It will then be unnecessary to conduct time-consuming interviews or audits to produce instantly out of date and error-prone EUC ownership documentation!\n<h3>EUC Data Security</h3>\nEUCs are often present on network shares, with opaque access policies and few (if any) controls to prevent unintentional deletion or corruption of data. An EUC management system should ensure data protection from the point of EUC integration right through to the loading of the data to the target table(s). End users should not require write access to the target databases! Neither should individuals in IT be regularly relied upon to run manual scripts for loading business critical data. Finally, it should be possible to restrict (at both column and row level) which groups are given permission to edit or approve data.\n<h3>Ease of Use</h3>\nAdding new tables / EUCs to the system should be a BAU (configuration) task, and possible without needing to secure IT development resource. The process should be so well defined, that new EUC operators can safely integrate their processes with minimum (if any) engagement from IT.\n<h3>EUC Traceability</h3>\nUnderstanding the flow of data into regulatory reports is essential for ensuring the accuracy of the figures they contain. Whilst this can be done automatically in some IT systems (eg SAS Metadata or Prophet Diagram View) the lineage breaks down when data flow crosses system borders. An EUC management system therefore should keep a full history to enable traceback of data items, right back to a copy of the EUC from where the data arrived.\n<h3>EUC Data Integration</h3>\nAny \"system\" worth it's salt will enable easy integration and flexible workflows to ensure that subsequent processes can be triggered on relevant events (such as EUC submission, or data approval). There should be no manual steps other than the act of submitting the data, and reviewing / approving the data.\n<h3>Version control / automated testing</h3>\nThis should really go without saying, however the reality is that there are still many teams (yes, even in IT) who work without source control. Don't even think about building a complex data management system without solid source control and a comprehensive test harness. Not to mention automated build and deployment. When it comes to a system that is responsible for maintenance of business data, it is imperative that it is robust, performant, and filled with checks and controls.\n<h3>Documentation</h3>\nWhilst a decent system should be intuitive enough to operate without a manual, when it comes to maintaining, extending, or using advanced features - documentation is essential, and should be updated regularly. New feature? Write the test, make the fix, build &amp; deploy, pass the test, update the documentation, release. Documentation should be useful for users, developers, and administrators - with diagrams, screenshots, and process flows.\n<h3>Scalability</h3>\nDuring month end, temperatures are high and the pressure is on. The last thing you need on BD2 is system failure, especially when it's 4:30 on a Friday and 150 users are affected. Be sure your platform of choice is proven, supported, and highly available.\n<h3>EUC Auditability</h3>\nOne of the biggest business benefits of an EUC Management System is the ability to trace data directly back to a locked down copy of the EUC that it came from. The system should therefore make it easy to identify and locate that copy, to see who submitted it, who signed it off, and what the precise changes were (adds, updates, deletes). <a href=\"/wp-content/uploads/2018/10/DC-UML-Deployment-Diagram-without-EUC-EUC-version.png\">\n<img class=\"aligncenter wp-image-1055 size-large\" src=\"/wp-content/uploads/2018/10/DC-UML-Deployment-Diagram-without-EUC-EUC-version.png\" alt=\"\" /></a>\n<h2>Data Controller for EUC Management</h2>\n<p>Before you go ahead and build / maintain your own ‘black box’ bespoke EUC reporting solution, take a look at what the Data Controller has to offer (in addition to everything described above):</p>\n<ul>\n<li>Ability to run bespoke SAS programs before / after every edit or approve</li>\n<li>Easy / simple deployment (entirely within your existing SAS platform)</li>\n<li>Roadmap (version restore, data access reports, data profiling)</li>\n<li>A smooth and performant review and approve experience</li>\n<li>A proven methodology for EUC capture</li>\n<li>Extensive <a href=\"https://docs.datacontroller.io\">documentation</a></li>\n<li>Free Community Edition</li>\n<li><a href=\"https://docs.datacontroller.io/excel\">Formula Support</a></li>\n<li>Secured by SAS</li>\n</ul>\n<p>We can also provide an on-site consultant to perform the deployment and user training. <a href=\"/contact\">Get in touch</a> to learn more!</p>\n<div class=\"gatsby-resp-iframe-wrapper\" style=\"padding-bottom: 56.25%; position: relative; height: 0; overflow: hidden; margin-bottom: 1.0725rem\" > <iframe src=\"https://www.youtube-nocookie.com/embed/QhShWNnNjIw\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\" style=\" position: absolute; top: 0; left: 0; width: 100%; height: 100%; \"></iframe> </div>","fields":{"slug":"/euc-management-system/"},"frontmatter":{"title":"EUC Management Systems need these 12 Attributes","date":"October 30, 2018","author":"Allan Bowe","authorLink":"https://www.linkedin.com/in/allanbowe/","previewImg":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#f8f8f8","images":{"fallback":{"src":"/static/63132e03fc89ea17c3e019083c4d9b53/9191a/DC-UML-Activity-Diagram-2.png","srcSet":"/static/63132e03fc89ea17c3e019083c4d9b53/1750d/DC-UML-Activity-Diagram-2.png 563w,\n/static/63132e03fc89ea17c3e019083c4d9b53/c5928/DC-UML-Activity-Diagram-2.png 1125w,\n/static/63132e03fc89ea17c3e019083c4d9b53/9191a/DC-UML-Activity-Diagram-2.png 2250w","sizes":"(min-width: 2250px) 2250px, 100vw"},"sources":[{"srcSet":"/static/63132e03fc89ea17c3e019083c4d9b53/cae1a/DC-UML-Activity-Diagram-2.webp 563w,\n/static/63132e03fc89ea17c3e019083c4d9b53/d7a15/DC-UML-Activity-Diagram-2.webp 1125w,\n/static/63132e03fc89ea17c3e019083c4d9b53/81e98/DC-UML-Activity-Diagram-2.webp 2250w","type":"image/webp","sizes":"(min-width: 2250px) 2250px, 100vw"}]},"width":2250,"height":900}}}}}}]}},"pageContext":{"page":"category","archives":{"2018":2,"2020":5,"2021":8,"2022":4,"2023":3},"recentPosts":[{"slug":"/v6-1-source-available/","title":"v6.1 Release: Source Available"},{"slug":"/v6-0-api-explorer/","title":"v6.0 Release: Viya API Explorer"},{"slug":"/v5-3-viewboxes/","title":"v5.3 Release: ViewBoxes"},{"slug":"/v5-2-lineage-updates/","title":"v5.2 Release: Lineage Updates"},{"slug":"/v5-1-library-dataset-info/","title":"v5.1 Release: Library & Dataset Info"},{"slug":"/v5-0-column-level-security/","title":"v5.0 Release: Column Level Security"},{"slug":"/v4-0-formats-special-missings/","title":"v4.0 Release: Formats & Special Missings"},{"slug":"/3-13-extended-data-validation/","title":"v3.13 Release: Extended Data Validation and Native Postgres Support"},{"slug":"/saasnow-partnership/","title":"SaasNow Partnership"},{"slug":"/roi-payback/","title":"ROI and Payback"}],"tags":[{"name":"Releases","totalCount":10},{"name":"SAS","totalCount":8},{"name":"Data Lineage","totalCount":5},{"name":"Data Quality","totalCount":5},{"name":"Excel","totalCount":4},{"name":"Use Cases","totalCount":4},{"name":"Regulatory","totalCount":3},{"name":"Data Catalog","totalCount":2},{"name":"Data Management","totalCount":2},{"name":"EUC","totalCount":2}],"filter":{"frontmatter":{"tags":{"in":["Data Management"]}}},"limit":6,"skip":0,"numPages":1,"currentPage":1,"tag":"Data Management"}},"staticQueryHashes":["615294906"]}